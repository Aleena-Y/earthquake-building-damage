# -*- coding: utf-8 -*-
"""Building_damage.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MnCrLlqqXA_Rh484a9s6hpWrp0eI2al7
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
import os
import cv2

# Set seeds for reproducibility
np.random.seed(1)
tf.random.set_seed(1)

#!tar -xvf  '/content/drive/MyDrive/datasets/xBD_train.tar' -C '/content'

from google.colab import drive
drive.mount('/content/drive')



import os
import numpy as np
import cv2
import tensorflow as tf
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.preprocessing.image import img_to_array
from PIL import Image
import numpy as np


# Function to load images from a directory
def load_images_from_directory(directory, img_size=(256, 256)):
    images = []
    for filename in os.listdir(directory):
        img_path = os.path.join(directory, filename)
        img = cv2.imread(img_path)
        if img is not None:
            img = cv2.resize(img, img_size)
            img = img_to_array(img) / 255.0  # Normalize
            images.append(img)
    return np.array(images)

# Function to load masks from a directory (for semantic segmentation)
def load_masks_from_directory(directory, img_size=(256,256), num_classes=3):
    masks = []
    for filename in os.listdir(directory):
        mask_path = os.path.join(directory, filename)
        mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)
        if mask is not None:
            mask = cv2.resize(mask, img_size)
            mask = np.clip(mask, 0, num_classes - 1)
            #mask = to_categorical(mask, num_classes=num_classes) #used only if the loss function is categorical crossentropy
            masks.append(mask)
    return np.array(masks)

# Filepaths for input images and target masks
input_dir = '/content/drive/MyDrive/earthquake_images'
target_dir = '/content/drive/MyDrive/earthquake_masks'

# Load images and masks
input_images = load_images_from_directory(input_dir)
num_classes = 5  # Change as per your dataset
target_images = load_masks_from_directory(target_dir, img_size=(256, 256), num_classes=num_classes)

from tensorflow.keras import layers, Model

def unet_model(input_size=(256, 256, 3), num_classes=5):
    inputs = layers.Input(input_size)

    # Encoder
    c1 = layers.Conv2D(64, (3, 3), activation='relu', padding='same')(inputs)
    c1 = layers.Conv2D(64, (3, 3), activation='relu', padding='same')(c1)
    p1 = layers.MaxPooling2D((2, 2))(c1)

    c2 = layers.Conv2D(128, (3, 3), activation='relu', padding='same')(p1)
    c2 = layers.Conv2D(128, (3, 3), activation='relu', padding='same')(c2)
    p2 = layers.MaxPooling2D((2, 2))(c2)

    c3 = layers.Conv2D(256, (3, 3), activation='relu', padding='same')(p2)
    c3 = layers.Conv2D(256, (3, 3), activation='relu', padding='same')(c3)
    p3 = layers.MaxPooling2D((2, 2))(c3)

    c4 = layers.Conv2D(512, (3, 3), activation='relu', padding='same')(p3)
    c4 = layers.Conv2D(512, (3, 3), activation='relu', padding='same')(c4)
    p4 = layers.MaxPooling2D((2, 2))(c4)

    c5 = layers.Conv2D(1024, (3, 3), activation='relu', padding='same')(p4)
    c5 = layers.Conv2D(1024, (3, 3), activation='relu', padding='same')(c5)

    # Decoder
    u6 = layers.Conv2DTranspose(512, (2, 2), strides=(2, 2), padding='same')(c5)
    u6 = layers.concatenate([u6, c4])
    c6 = layers.Conv2D(512, (3, 3), activation='relu', padding='same')(u6)
    c6 = layers.Conv2D(512, (3, 3), activation='relu', padding='same')(c6)

    u7 = layers.Conv2DTranspose(256, (2, 2), strides=(2, 2), padding='same')(c6)
    u7 = layers.concatenate([u7, c3])
    c7 = layers.Conv2D(256, (3, 3), activation='relu', padding='same')(u7)
    c7 = layers.Conv2D(256, (3, 3), activation='relu', padding='same')(c7)

    u8 = layers.Conv2DTranspose(128, (2, 2), strides=(2, 2), padding='same')(c7)
    u8 = layers.concatenate([u8, c2])
    c8 = layers.Conv2D(128, (3, 3), activation='relu', padding='same')(u8)
    c8 = layers.Conv2D(128, (3, 3), activation='relu', padding='same')(c8)

    u9 = layers.Conv2DTranspose(64, (2, 2), strides=(2, 2), padding='same')(c8)
    u9 = layers.concatenate([u9, c1])
    c9 = layers.Conv2D(64, (3, 3), activation='relu', padding='same')(u9)
    c9 = layers.Conv2D(64, (3, 3), activation='relu', padding='same')(c9)

    outputs = layers.Conv2D(num_classes, (1, 1), activation='softmax')(c9)

    model = Model(inputs=[inputs], outputs=[outputs])
    return model

model = unet_model(input_size=(256, 256, 3), num_classes=num_classes)
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

from sklearn.model_selection import train_test_split

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(input_images, target_images, test_size=0.2, random_state=42)
del input_images, target_images, num_classes
# Train the model
history = model.fit(X_train, y_train, epochs=3, batch_size=2, validation_split=0.1)

from sklearn.metrics import accuracy_score, f1_score

# Predict on test set
y_pred = model.predict(X_test)
y_pred_flat = np.argmax(y_pred, axis=-1).flatten()
y_test_flat = y_test.flatten()
# Calculate accuracy and F1 score
accuracy = accuracy_score(y_test, y_pred)
f1 = f1_score(y_test_flat, y_pred_flat, average='weighted')

print(f'Accuracy: {accuracy}')
print(f'F1 Score: {f1}')

y_pred.shape

y_test.shape

"""Number of unique pixel values: 5"""

from sklearn.metrics import accuracy_score, f1_score

# Predict on test set
y_pred = model.predict(X_test)
y_pred_flat = np.argmax(y_pred, axis=-1).flatten()
y_test_flat = y_test.flatten()

# Calculate accuracy and F1 score
accuracy = accuracy_score(y_test_flat, y_pred_flat)  # Use flattened arrays
f1 = f1_score(y_test_flat, y_pred_flat, average='weighted')

print(f'Accuracy: {accuracy}')
print(f'F1 Score: {f1}')